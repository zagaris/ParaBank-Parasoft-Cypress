/// <reference types="cypress" />

import RegisterPage from "./PageObject/RegisterPage";

describe("Parabank register", () => {
  beforeEach(() => {
    cy.fixture("registrationInfo").then(function (testdata) {
      this.testdata = testdata;
    });
  });
  it("Register with correct info", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getSuccessfulRegistration();
  });
  it("Register user with existing username", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername("Yiannis9999");
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getDuplicateUsernameError();
  });
  it("Register user with no matching passwords", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword("12345");
    register.enterConfirmationPassword("1234");
    register.submit();
    register.getNotMatchingPasswordsError();
  });
  it("Register user with empty First Name", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyFirstNameError();
  });
  it("Register user with empty Last Name", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyLastNameError();
  });
  it("Register user with empty address", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyAddressError();
  });
  it("Register user with empty city", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyCityError();
  });
  it("Register user with empty state", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyStateError();
  });
  it("Register user with empty zip code", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyZipCodeError();
  });
  it("Register user with empty SSN", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterUsername(this.testdata.username);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptySSNError();
  });
  it("Register user with empty username", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyUsernameError();
  });
  it("Register user with empty username", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyUsernameError();
  });
  it("Register user with empty username", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyUsernameError();
  });
  it("Register user with empty username", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterPassword(this.testdata.password);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyUsernameError();
  });
  it("Register user with empty password", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterConfirmationPassword(this.testdata.confirmationPassword);
    register.submit();
    register.getEmptyPasswordError();
  });
  it("Register user with empty confirmation password", function () {
    const register = new RegisterPage();
    register.navigate();
    register.enterFirstName(this.testdata.firstname);
    register.enterLastName(this.testdata.lastname);
    register.enterAddress(this.testdata.address);
    register.enterCity(this.testdata.city);
    register.enterState(this.testdata.state);
    register.enterZipCode(this.testdata.zipCode);
    register.enterPhoneNumber(this.testdata.phoneNumber);
    register.enterSSN(this.testdata.ssn);
    register.enterPassword(this.testdata.password);
    register.submit();
    register.getEmptyConfirmationPasswordError();
  });
});
